{
  "contract_name": "hackatom",
  "contract_version": "0.0.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "type": "v1",
    "root": 1,
    "definitions": [
      {
        "name": "String",
        "type": "string"
      },
      {
        "name": "InstantiateMsg",
        "type": "struct",
        "properties": {
          "beneficiary": {
            "value": 0
          },
          "verifier": {
            "value": 0
          }
        }
      }
    ]
  },
  "execute": {
    "type": "v1",
    "root": 1,
    "definitions": [
      {
        "name": "u32",
        "type": "integer",
        "precision": 32,
        "signed": false
      },
      {
        "name": "ExecuteMsg",
        "type": "enum",
        "cases": {
          "allocate_large_memory": {
            "description": "Allocate large amounts of memory without consuming much gas",
            "type": "named",
            "properties": {
              "pages": {
                "value": 0
              }
            }
          },
          "cpu_loop": {
            "description": "Infinite loop to burn cpu cycles (only run when metering is enabled)",
            "type": "named",
            "properties": {}
          },
          "memory_loop": {
            "description": "Infinite loop reading and writing memory",
            "type": "named",
            "properties": {}
          },
          "message_loop": {
            "description": "Infinite loop sending message to itself",
            "type": "named",
            "properties": {}
          },
          "panic": {
            "description": "Trigger a panic to ensure framework handles gracefully",
            "type": "named",
            "properties": {}
          },
          "release": {
            "description": "Releasing all funds in the contract to the beneficiary. This is the only \"proper\" action of this demo contract.",
            "type": "named",
            "properties": {}
          },
          "storage_loop": {
            "description": "Infinite loop making storage calls (to test when their limit hits)",
            "type": "named",
            "properties": {}
          },
          "user_errors_in_api_calls": {
            "description": "Starting with CosmWasm 0.10, some API calls return user errors back to the contract.\nThis triggers such user errors, ensuring the transaction does not fail in the backend.",
            "type": "named",
            "properties": {}
          }
        }
      }
    ]
  },
  "query": {
    "type": "v1",
    "root": 2,
    "definitions": [
      {
        "name": "String",
        "type": "string"
      },
      {
        "name": "u32",
        "type": "integer",
        "precision": 32,
        "signed": false
      },
      {
        "name": "QueryMsg",
        "type": "enum",
        "cases": {
          "get_int": {
            "description": "GetInt returns a hardcoded u32 value",
            "type": "named",
            "properties": {}
          },
          "other_balance": {
            "description": "This returns cosmwasm_std::AllBalanceResponse to demo use of the querier",
            "type": "named",
            "properties": {
              "address": {
                "value": 0
              }
            }
          },
          "recurse": {
            "description": "Recurse will execute a query into itself up to depth-times and return\nEach step of the recursion may perform some extra work to test gas metering\n(`work` rounds of sha256 on contract).\nNow that we have Env, we can auto-calculate the address to recurse into",
            "type": "named",
            "properties": {
              "depth": {
                "value": 1
              },
              "work": {
                "value": 1
              }
            }
          },
          "verifier": {
            "description": "returns a human-readable representation of the verifier\nuse to ensure query path works in integration tests",
            "type": "named",
            "properties": {}
          }
        }
      }
    ]
  },
  "migrate": {
    "type": "v1",
    "root": 1,
    "definitions": [
      {
        "name": "String",
        "type": "string"
      },
      {
        "name": "MigrateMsg",
        "description": "MigrateMsg allows a privileged contract administrator to run\na migration on the contract. In this (demo) case it is just migrating\nfrom one hackatom code to the same code, but taking advantage of the\nmigration step to set a new validator.\n\nNote that the contract doesn't enforce permissions here, this is done\nby blockchain logic (in the future by blockchain governance)",
        "type": "struct",
        "properties": {
          "verifier": {
            "value": 0
          }
        }
      }
    ]
  },
  "sudo": {
    "type": "v1",
    "root": 4,
    "definitions": [
      {
        "name": "String",
        "type": "string"
      },
      {
        "name": "Uint128",
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding,\nsuch that the full u128 range can be used for clients that convert JSON numbers to floats,\nlike JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n```\n# use cosmwasm_std::Uint128;\nlet a = Uint128::from(123u128);\nassert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64);\nassert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32);\nassert_eq!(c.u128(), 70);\n```",
        "type": "integer",
        "precision": 128,
        "signed": false
      },
      {
        "name": "Coin",
        "type": "struct",
        "properties": {
          "amount": {
            "value": 1
          },
          "denom": {
            "value": 0
          }
        }
      },
      {
        "name": "alloc::vec::Vec<cosmwasm_std::coin::Coin>",
        "type": "array",
        "items": 2
      },
      {
        "name": "SudoMsg",
        "description": "SudoMsg is only exposed for internal Cosmos SDK modules to call.\nThis is showing how we can expose \"admin\" functionality than can not be called by\nexternal users or contracts, but only trusted (native/Go) code in the blockchain",
        "type": "enum",
        "cases": {
          "steal_funds": {
            "type": "named",
            "properties": {
              "amount": {
                "value": 3
              },
              "recipient": {
                "value": 0
              }
            }
          }
        }
      }
    ]
  },
  "responses": {
    "get_int": {
      "type": "v1",
      "root": 1,
      "definitions": [
        {
          "name": "u32",
          "type": "integer",
          "precision": 32,
          "signed": false
        },
        {
          "name": "IntResponse",
          "type": "struct",
          "properties": {
            "int": {
              "value": 0
            }
          }
        }
      ]
    },
    "other_balance": {
      "type": "v1",
      "root": 4,
      "definitions": [
        {
          "name": "String",
          "type": "string"
        },
        {
          "name": "Uint128",
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding,\nsuch that the full u128 range can be used for clients that convert JSON numbers to floats,\nlike JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n```\n# use cosmwasm_std::Uint128;\nlet a = Uint128::from(123u128);\nassert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64);\nassert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32);\nassert_eq!(c.u128(), 70);\n```",
          "type": "integer",
          "precision": 128,
          "signed": false
        },
        {
          "name": "Coin",
          "type": "struct",
          "properties": {
            "amount": {
              "value": 1
            },
            "denom": {
              "value": 0
            }
          }
        },
        {
          "name": "alloc::vec::Vec<cosmwasm_std::coin::Coin>",
          "type": "array",
          "items": 2
        },
        {
          "name": "AllBalanceResponse",
          "type": "struct",
          "properties": {
            "amount": {
              "description": "Returns all non-zero coins held by this account.",
              "value": 3
            }
          }
        }
      ]
    },
    "recurse": {
      "type": "v1",
      "root": 1,
      "definitions": [
        {
          "name": "Binary",
          "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization\nwith serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>.\nSee also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
          "type": "binary"
        },
        {
          "name": "RecurseResponse",
          "type": "struct",
          "properties": {
            "hashed": {
              "description": "hashed is the result of running sha256 \"work+1\" times on the contract's human address",
              "value": 0
            }
          }
        }
      ]
    },
    "verifier": {
      "type": "v1",
      "root": 1,
      "definitions": [
        {
          "name": "String",
          "type": "string"
        },
        {
          "name": "VerifierResponse",
          "type": "struct",
          "properties": {
            "verifier": {
              "value": 0
            }
          }
        }
      ]
    }
  }
}
